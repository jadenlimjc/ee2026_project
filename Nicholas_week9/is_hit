`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 11.10.2024 08:52:22
// Design Name: 
// Module Name: is_hit
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module is_hit (
    
    input [15:0] xpos_bus,    // Bus for all projectile x positions
    input [15:0] ypos_bus,    // Bus for all projectile y positions
    input [7:0] opp_tankx,                     // Opponent tank x position
    input [7:0] opp_tanky,                     // Opponent tank y position
    output reg [1:0] hit_wall = 0, // Output array for each projectile's wall hit status
    output reg [1:0] hit_tank = 0  // Output array for each projectile's tank hit status
);
parameter MAX_PROJECTILES = 2;
parameter xmin = 0;
parameter xmax = 95;
parameter ymin = 0;
parameter ymax = 63;
parameter TANK_WIDTH = 3;
parameter TANK_HEIGHT = 3;

reg [7:0] xpos [0:MAX_PROJECTILES-1];  // Array for individual projectile x positions
reg [7:0] ypos [0:MAX_PROJECTILES-1];  // Array for individual projectile y positions

integer i;

always @(xpos_bus,ypos_bus) begin
    // Extract xpos and ypos from the buses
    xpos[0] = xpos_bus[7:0];
    xpos[1] = xpos_bus[15:8];
    ypos[0] = ypos_bus[7:0];
    ypos[1] = ypos_bus[15:8];
   

    // Iterate through all projectiles
 
        // Wall hit detection
        if (xpos[0] > xmax || xpos[0] < xmin || ypos[0] > ymax || ypos[0] < ymin) begin
            hit_wall[0] <= 1;
        end else begin
            hit_wall[0] <= 0;
        end

        if (xpos[1] > xmax || xpos[1] < xmin || ypos[1] > ymax || ypos[1] < ymin) begin
            hit_wall[1] <= 1;
        end else begin
            hit_wall[1] <= 0;
        end
       

        // Tank hit detection
        if ((xpos[0] >= opp_tankx && xpos[0] < opp_tankx + TANK_WIDTH) &&  // Projectile in X bounds of tank
            (ypos[0] >= opp_tanky && ypos[0] < opp_tanky + TANK_HEIGHT))   // Projectile in Y bounds of tank
        begin
            hit_tank[0] <= 1;
        end else begin
            hit_tank[0] <= 0;
        end
    
        if ((xpos[1] >= opp_tankx && xpos[1] < opp_tankx + TANK_WIDTH) &&  // Projectile in X bounds of tank
           (ypos[1] >= opp_tanky && ypos[1] < opp_tanky + TANK_HEIGHT))   // Projectile in Y bounds of tank
        begin
           hit_tank[1] <= 1;
        end else begin
           hit_tank[1] <= 0;
        end
        
end

endmodule

